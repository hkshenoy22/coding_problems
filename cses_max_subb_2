#include<bits/stdc++.h>
#include <iterator>
#include <iostream>
#include <numeric>
#include <math.h>
#define ll long long 
#define ull long
#define mpa make_pair
#define pb push_back
#define ff first
#define pii pair<ll,ll>
#define dd long long
#define trace(x) cerr << #x << " : " << x << endl
#define ss second
#define boost ios_base::sync_with_stdio(0)
#define forp(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,n)    for(ll i=0;i<n;++i)
#define ren(i,n)    for(ll i=n-1;i>=0;i--)
#define forn(i,a,b) for(ll i=a;i>=b;i--)
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end();
#define sc(x) scanf("%lld",&x)
#define clr(x,val) memset(x,val,sizeof(x))
#define pr(x) printf("%lld\n",x) 
#define gc getchar
#define pdd pair<dd,dd>
#define prec(x) cout<<fixed<<setprecision(x)
#define fre freopen("input.txt","r",stdin),freopen("output.txt","w",stdout)
using namespace std;
ll ele[200005];
ll segtree[800005];
ll csum[200005];
void build(ll node,ll l,ll r){
	if(r<l){
		return ;
	}
	if(l==r){
		segtree[node]=csum[l];
		return;
	}
	
	ll m=(l+r)/2ll;
	
	build(node*2,l,m);
	build(node*2+1,m+1,r);
	
	segtree[node]=min(segtree[node*2],segtree[node*2+1]);
	

}
ll query(ll node,ll l,ll r,ll st,ll en){
	
	if(st>=l && en<=r){
		return segtree[node];
	}
	
	
	if(st>r or en<l){
	    return 1e18;
	}
	ll m=(st+en)/2ll;
	
	return min(query(node*2,l,r,st,m),query(node*2+1,l,r,m+1,en));
	
}
int main(){
	ll n,a,b;
	cin>>n>>a>>b;
	
	for(ll i=1;i<=n;i++)cin>>ele[i],csum[i]=csum[i-1]+ele[i];
	
	if(a==b && b==n){
	    cout<<csum[n];
	    return 0;
	}
	
	
	build(1,1,n);
	ll ans=-1e18;
	
	for(ll i=1;i<=n;i++){
	
		if(i==a){
		    ans=max(ans,csum[i]);
		}
		else if(i>=a+1){
			ll l=max(1ll,i-a);
			ll r=max(1ll,i-b);
			
			ll sub=query(1,r,l,1,n);
			ans=max(ans,csum[i]-sub);
			
			if(i-b<=0){
				ans=max(ans,csum[i]);
			}
			//cout<<i<<" "<<csum[i]<<" "<<ans<<endl;
		}
		
		
	}
	
	cout<<ans<<endl;
	
	
}
  
  
  
   
 
