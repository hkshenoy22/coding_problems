/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int get_height(TreeNode *root){
        if(root==NULL)return 0;
        return 1+max(get_height(root->right),get_height(root->left));
    }
    
    bool is_leaf(TreeNode *root){
        if(root!=NULL){
            if(root->right==NULL and root->left==NULL)return 1;
        }
        return 0;
    }
    
    int get_sum(TreeNode *root,int h){
        
        if(h<0)return 0;
        
        if(root){
            if(h==0){
               if(is_leaf(root))return root->val;
               else return 0; 
            }
            else{
                return get_sum(root->left,h-1)+get_sum(root->right,h-1);
            }
        }
        
        
        return 0;
        
    }
    
    int deepestLeavesSum(TreeNode* root) {
        int h=get_height(root);
        return get_sum(root,h-1);
    }
};
