/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    map<int,int> inorder_loc;
    vector<int> post;
    
    TreeNode *build(int l,int r,int post_ind){
        if(l>r or post_ind<0){
            return nullptr;
        }
        
        TreeNode *root=new TreeNode(post[post_ind]);
        
        int ind=inorder_loc[root->val];
         
        
        
        int righ_size=r-ind;
        cout<<l<<" "<<ind-1<<" "<<post_ind-righ_size-1<<endl;
        root->left=build(l,ind-1,post_ind-righ_size-1);
        root->right=build(ind+1,r,post_ind-1);
        
            
        return root;
        
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        post=postorder;
        int n=inorder.size();
        for(int i=0;i<n;i++)inorder_loc[inorder[i]]=i+1;
        
        if(n==0 or post.size()==0){
            return nullptr;
        }
        
        
        int m=post.size()-1;
        return build(1,n,m);
        
        
    }
};
