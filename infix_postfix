#include<bits/stdc++.h>
#include <iterator>
#include <iostream>
#include <numeric>
#include <math.h>
#define ll long long
#define ull long
#define mpa make_pair
#define pb push_back
#define ff first
#define pii pair<ll,ll>
#define dd long long
#define trace(x) cerr << #x << " : " << x << endl
#define ss second
#define boost ios_base::sync_with_stdio(0)
#define forp(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,n)    for(ll i=0;i<n;++i)
#define ren(i,n)    for(ll i=n-1;i>=0;i--)
#define forn(i,a,b) for(ll i=a;i>=b;i--)
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end();
#define sc(x) scanf("%lld",&x)
#define clr(x,val) memset(x,val,sizeof(x))
#define pr(x) printf("%lld\n",x) 
#define gc getchar
#define pdd pair<dd,dd>
#define prec(x) cout<<fixed<<setprecision(x)
#define fre freopen("input.txt","r",stdin),freopen("output.txt","w",stdout)
#define arr array 
using namespace std;
char s[100005];
ll preci(char c){
    
    if(c=='('){
    	return -7;
	}
    if(c=='^') {
        return 5;
    }
    else if(c=='*' || c=='/') {
        return 4;
    }
    else if(c=='+' || c=='-') {
        return 3;
    }
    else return 2;
    return 1;
}

ll is_symbol(char ch){
	if(ch=='(' or ch==')' or ch=='+' or ch=='-' or ch=='*' or ch=='/' or ch=='^')return 1;
	return 0;
}

char a[1000005];
int main(){
  
  
  ll t;
  cin>>t;
  while(t--){
  	 ll n;
  	 cin>>n>>(a+1);
  	 string sol;
  	 stack<char> sym;
  	 for(ll i=1;i<=n;i++){
  	 	 if(!is_symbol(a[i])){
  	 	 	sol+=a[i];
		  }else{
		  	if(a[i]=='(')sym.push(a[i]);
		  	else if(a[i]==')'){
		  		while(sym.size() && sym.top()!='('){
		  			sol+=sym.top();
		  			sym.pop();
		  		}
		  		if(sym.size() && sym.top()=='(')sym.pop();
			}
			else{
				while(sym.size() && preci(sym.top())>=preci(a[i]) ){
					sol+=sym.top();
					sym.pop();
				}
				sym.push(a[i]);
			}
		  }
		  
	}
	while(sym.size()){
		 sol+=sym.top();
		 sym.pop();
	}
	 cout<<sol<<endl;
	
  
    
  	
  }
  
  
  
  
  
  
  
  
  
  
  
  
    
    
    
    
    
    
	
   
}
  
