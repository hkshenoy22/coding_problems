/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> ele,csum;
    void inorder(TreeNode* root){
        if(!root){
            return ;
        }
        inorder(root->left);
        ele.push_back(root->val);
        csum.push_back(root->val);
        inorder(root->right);
        
    }
    
    void compute(){
        int n=ele.size();
        for(int i=1;i<n;i++)csum[i]=csum[i-1]+csum[i];
        
    }
    
    int get_sum(int y){
        vector<int>::iterator it;
        it=upper_bound(ele.begin(),ele.end(),y);
        if(it==ele.end())return 0;
        
        int ind=it-ele.begin();
        int n=ele.size();
        
        return csum[n-1]-csum[ind-1];
    }
    
    TreeNode* modify_tree(TreeNode* root){
        if(root==NULL){
            return root;
        }
        root->val=root->val+get_sum(root->val);
        root->right=modify_tree(root->right);
        root->left=modify_tree(root->left);
        
        return root;
    }
    
    TreeNode* convertBST(TreeNode* root) {
        inorder(root);
        compute();
        modify_tree(root);
        
        return root;
        
    }
};
